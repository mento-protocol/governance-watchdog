# YOU DO NOT NEED TO CREATE A .env FILE MANUALLY
# Terraform will automatically create a local .env file with the required environment variables when you run `terraform apply`.
# This file is just to illustrate the required environment variables for the function to work locally.

# Required for the function to be able to look up the Discord Webhook URL in GCP Secret Manager.
# You can check it manually via `gcloud projects list --filter="name:governance-watchdog*" --format="value(projectId)"`
GCP_PROJECT_ID=

# Required for the function to be able to look up secrets in GCP Secret Manager.
# You can check it manually via `gcloud secrets list`
DISCORD_WEBHOOK_URL_SECRET_ID=discord-webhook-url
TELEGRAM_BOT_TOKEN_SECRET_ID=telegram-bot-token
QUICKNODE_SECURITY_TOKEN_SECRET_ID=quicknode-security-token
X_AUTH_TOKEN_SECRET_ID=x-auth-token

# You can check it manually either via
# a) `terraform state show "google_cloudfunctions2_function.watchdog_notifications" | grep TELEGRAM_CHAT_ID | awk -F '= ' '{print $2}' | tr -d '"'`
# OR
# b) inviting @MissRose_bot to the telegram group and then using the `/id` command (please remove the bot after you're done)
# Make sure to invite @MentoGovBot to this chat which is the bot account that we are sending notifications through
TELEGRAM_CHAT_ID=

#############################################################
# Test environment variables (for development mode)
#############################################################

# Set NODE_ENV to 'development' to use test channels

# A separate Discord webhook for testing
DISCORD_TEST_WEBHOOK_URL_SECRET_ID=discord-test-webhook-url

# A separate Telegram chat for testing
# Make sure to invite @MentoGovBot to this chat which is the bot account that we are sending notifications through
TELEGRAM_TEST_CHAT_ID=your-test-telegram-chat-id
